# Выполнил Егоров И.М

# Входные данные:
# Программа принимает на вход A - массив чисел(натуральное число), n_a - количество цифр числа A, то же самое с B.

# Алгоритм:
# Получаем на вход массив чисел. Присваиваем переменным i и j индексы последнего элемента массива.
# С помощью функции COM_NN_D сравниваем два числа. Если В больше А, только меняем их местами.(Для удобства работы)
# Далее, начиная с последнего элемента начинаем прибавлять к элементу А элемент В.
# Если число получается больше 10, то прибавляем к следующему элементу A[i] // 10, а само число A[i] делаем остатком.
# (A[i] % 10). Если достигаем старшей цифры числа, а эта чифра оказывается больше или равна 10:
# То с помощью insert добавляем в массив новое число ( A[i]//10 )

# Выходные данные:
# Возвращаем массив чисел A (получившаяся сумма) и количество цифр в массива n_a.

A = [4,8,7,9,4]
B = [9,7,3,7,9,8]
n_a = len(A)
n_b = len(B)

def ADD_NN_N(n_a, A, n_b, B):
    i = n_a - 1
    j = n_b - 1
    if COM_NN_D(n_a, A, n_b, B)==1:
        tmp = A
        A = B
        B = tmp
        tmp = i
        i = j
        j = tmp
    while (i or j) >= 0:
        A[i] += B[j]
        if A[i] >= 10:
            if (i or j) != 0:
                A[i-1] += A[i] // 10
            tmp = A[i]
            A[i] %= 10
            if i*j == 0:
                if i == j:
                    A.insert(0, tmp // 10)
                    A[i+1] %= 10
            i -= 1
            j -= 1
        else:
            i -= 1
            j -= 1
    if A[i] >= 10:
        A.insert(0, A[i]//10)
        A[i+1] %= 10
    n_a = len(A)
    return [n_a, A]

print(ADD_NN_N(n_a,A, n_b, B))
